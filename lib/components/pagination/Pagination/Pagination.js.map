{"version":3,"file":"Pagination.js","sources":["../../../../libSrc/components/pagination/Pagination/Pagination.tsx"],"sourcesContent":["import React from 'react'\nimport classnames from 'classnames'\nimport Icon from '../../Icon/Icons.js'\nimport Link from '../../Link/Link.js'\nimport Button from '../../Button/Button.js'\nimport PaginationOverflow from '../PaginationOverflow/PaginationOverflow.js'\nimport PaginationPage from '../PaginationPage/PaginationPage.js'\n\nexport type PaginationProps = {\n  pathname: string // pathname of results page\n  totalPages?: number // total items divided by items per page\n  currentPage: number // current page number (starting at 1)\n  maxSlots?: number // number of pagination \"slots\"\n  onClickNext?: () => void\n  onClickPrevious?: () => void\n  onClickPageNumber?: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    page: number\n  ) => void\n} & JSX.IntrinsicElements['nav']\n\nconst Pagination = ({\n  pathname,\n  totalPages,\n  currentPage,\n  className,\n  maxSlots = 7,\n  onClickPrevious,\n  onClickNext,\n  onClickPageNumber,\n  ...props\n}: PaginationProps): React.ReactElement => {\n  const navClasses = classnames('usa-pagination', className)\n\n  const isOnFirstPage = currentPage === 1\n  const isOnLastPage = totalPages ? currentPage === totalPages : false\n\n  const showOverflow = totalPages ? totalPages > maxSlots : true // If more pages than slots, use overflow indicator(s)\n\n  const middleSlot = Math.round(maxSlots / 2) // 4 if maxSlots is 7\n  const isBeforeMiddleSlot = !!(\n    totalPages && totalPages - currentPage >= middleSlot\n  )\n  const showPrevOverflow = showOverflow && currentPage > middleSlot\n  const showNextOverflow = isBeforeMiddleSlot || !totalPages\n  // Assemble array of page numbers to be shown\n  const currentPageRange: Array<number | 'overflow'> =\n    showOverflow || !totalPages\n      ? [currentPage]\n      : Array.from({ length: totalPages }).map((_, i) => i + 1)\n\n  if (showOverflow) {\n    // Determine range of pages to show based on current page & number of slots\n    // Follows logic described at: https://designsystem.digital.gov/components/pagination/\n    const prevSlots = isOnFirstPage ? 0 : showPrevOverflow ? 2 : 1 // first page + prev overflow\n    const nextSlots = isOnLastPage ? 0 : showNextOverflow ? 2 : 1 // next overflow + last page\n    const pageRangeSize = maxSlots - 1 - (prevSlots + nextSlots) // remaining slots to show (minus one for the current page)\n\n    // Determine how many slots we have before/after the current page\n    let currentPageBeforeSize = 0\n    let currentPageAfterSize = 0\n    if (showPrevOverflow && showNextOverflow) {\n      // We are in the middle of the set, there will be overflow (...) at both the beginning & end\n      // Ex: [1] [...] [9] [10] [11] [...] [24]\n      currentPageBeforeSize = Math.round((pageRangeSize - 1) / 2)\n      currentPageAfterSize = pageRangeSize - currentPageBeforeSize\n    } else if (showPrevOverflow) {\n      // We are in the end of the set, there will be overflow (...) at the beginning\n      // Ex: [1] [...] [20] [21] [22] [23] [24]\n      currentPageAfterSize = (totalPages || 0) - currentPage - 1 // current & last\n      currentPageAfterSize = currentPageAfterSize < 0 ? 0 : currentPageAfterSize\n      currentPageBeforeSize = pageRangeSize - currentPageAfterSize\n    } else if (showNextOverflow) {\n      // We are in the beginning of the set, there will be overflow (...) at the end\n      // Ex: [1] [2] [3] [4] [5] [...] [24]\n      currentPageBeforeSize = currentPage - 2 // first & current\n      currentPageBeforeSize =\n        currentPageBeforeSize < 0 ? 0 : currentPageBeforeSize\n      currentPageAfterSize = pageRangeSize - currentPageBeforeSize\n    }\n\n    // Populate the remaining slots\n    let counter = 1\n    while (currentPageBeforeSize > 0) {\n      // Add previous pages before the current page\n      currentPageRange.unshift(currentPage - counter)\n      counter++\n      currentPageBeforeSize--\n    }\n\n    counter = 1\n    while (currentPageAfterSize > 0) {\n      // Add subsequent pages after the current page\n      currentPageRange.push(currentPage + counter)\n      counter++\n      currentPageAfterSize--\n    }\n\n    // Add prev/next overflow indicators, and first/last pages as needed\n    if (showPrevOverflow) currentPageRange.unshift('overflow')\n    if (currentPage !== 1) currentPageRange.unshift(1)\n    if (showNextOverflow) currentPageRange.push('overflow')\n    if (totalPages && currentPage !== totalPages)\n      currentPageRange.push(totalPages)\n  }\n\n  const prevPage = !isOnFirstPage && currentPage - 1\n  const nextPage = !isOnLastPage && currentPage + 1\n\n  return (\n    <nav aria-label=\"Pagination\" className={navClasses} {...props}>\n      <ul className=\"usa-pagination__list\">\n        {prevPage && (\n          <li className=\"usa-pagination__item usa-pagination__arrow\">\n            {onClickPrevious ? (\n              <Button\n                type=\"button\"\n                unstyled\n                className=\"usa-pagination__link usa-pagination__previous-page\"\n                aria-label=\"Previous page\"\n                data-testid=\"pagination-previous\"\n                onClick={onClickPrevious}>\n                <Icon.NavigateBefore />\n                <span className=\"usa-pagination__link-text\">Previous</span>\n              </Button>\n            ) : (\n              <Link\n                href={`${pathname}?page=${prevPage}`}\n                className=\"usa-pagination__link usa-pagination__previous-page\"\n                aria-label=\"Previous page\">\n                <Icon.NavigateBefore />\n                <span className=\"usa-pagination__link-text\">Previous</span>\n              </Link>\n            )}\n          </li>\n        )}\n\n        {currentPageRange.map((pageNum, i) =>\n          pageNum === 'overflow' ? (\n            <PaginationOverflow key={`pagination_overflow_${i}`} />\n          ) : (\n            <PaginationPage\n              key={`pagination_page_${pageNum}`}\n              page={pageNum}\n              pathname={pathname}\n              isCurrent={pageNum === currentPage}\n              onClickPageNumber={onClickPageNumber}\n            />\n          )\n        )}\n\n        {nextPage && (\n          <li className=\"usa-pagination__item usa-pagination__arrow\">\n            {onClickNext ? (\n              <Button\n                type=\"button\"\n                unstyled\n                className=\"usa-pagination__link usa-pagination__next-page\"\n                aria-label=\"Next page\"\n                data-testid=\"pagination-next\"\n                onClick={onClickNext}>\n                <span className=\"usa-pagination__link-text\">Next</span>\n                <Icon.NavigateNext />\n              </Button>\n            ) : (\n              <Link\n                href={`${pathname}?page=${nextPage}`}\n                className=\"usa-pagination__link usa-pagination__next-page\"\n                aria-label=\"Next page\">\n                <span className=\"usa-pagination__link-text\">Next</span>\n                <Icon.NavigateNext />\n              </Link>\n            )}\n          </li>\n        )}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Pagination\n"],"names":["Pagination","pathname","totalPages","currentPage","className","maxSlots","onClickPrevious","onClickNext","onClickPageNumber","props","navClasses","classnames","isOnFirstPage","isOnLastPage","showOverflow","middleSlot","isBeforeMiddleSlot","showPrevOverflow","showNextOverflow","currentPageRange","_","i","prevSlots","nextSlots","pageRangeSize","currentPageBeforeSize","currentPageAfterSize","counter","prevPage","nextPage","jsx","jsxs","Button","Icon","Link","pageNum","PaginationOverflow","PaginationPage"],"mappings":"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"}