{"version":3,"file":"ComboBox.js","sources":["../../../../../libSrc/components/forms/combobox/ComboBox/ComboBox.tsx"],"sourcesContent":["import React, {\n  type KeyboardEvent,\n  type FocusEvent,\n  useEffect,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from 'react'\nimport classnames from 'classnames'\n\nimport useComboBox, { type Action, type State } from '../useComboBox.js'\nimport ComboBoxInput, {\n  type ComboBoxInputProps,\n} from '../ComboBoxInput/ComboBoxInput.js'\nimport { DEFAULT_FILTER, Direction } from './utils.js'\nimport { FocusMode } from '../../../../utils/constants.js'\nimport Select, { type SelectProps } from '../../Select/Select.js'\nimport { ActionTypes } from '../constants.js'\n\n/*  As per USWDS spec, ComboBox includes a HTML <select> with options AND a separate <input> and dropdown <ul> with items.\n    The select is usa-sr-only and is always hidden via CSS. The input and dropdown list are the elements used for interaction.\n\n    There is the ability to pass in custom props directly to the select and input.\n    This should be using sparingly and not with existing Combobox props such as disabled, onChange, defaultValue. \n*/\n\nexport interface ComboBoxOption {\n  value: string\n  label: string\n}\n\nexport interface CustomizableFilter {\n  filter: string\n  extras?: Record<string, string>\n}\n\nexport type ComboBoxProps = {\n  id: string\n  name: string\n  className?: string\n  options: ComboBoxOption[]\n  defaultValue?: string\n  disabled?: boolean\n  onChange: (val?: string) => void\n  assistiveHint?: string\n  noResults?: string\n  inputProps?: ComboBoxInputProps\n  selectProps?: Omit<SelectProps, 'name'> & { name?: string }\n  ulProps?: JSX.IntrinsicElements['ul']\n  customFilter?: CustomizableFilter\n  disableFiltering?: boolean\n}\n\nexport type ComboBoxRef = {\n  focus: () => void\n  clearSelection: () => void\n}\n\nexport const ComboBoxForwardRef: React.ForwardRefRenderFunction<\n  ComboBoxRef,\n  ComboBoxProps\n> = (\n  {\n    id,\n    name,\n    className,\n    options,\n    defaultValue,\n    disabled,\n    onChange,\n    assistiveHint,\n    noResults,\n    selectProps,\n    inputProps,\n    ulProps,\n    customFilter,\n    disableFiltering = false,\n    ...props\n  },\n  ref\n): React.ReactElement => {\n  const isDisabled = !!disabled\n\n  let defaultOption\n  if (defaultValue) {\n    defaultOption = options.find((opt: ComboBoxOption): boolean => {\n      return opt.value === defaultValue\n    })\n  }\n\n  const filter: CustomizableFilter = customFilter\n    ? customFilter\n    : { filter: DEFAULT_FILTER }\n\n  const initialState: State = {\n    isOpen: false,\n    selectedOption: defaultOption ? defaultOption : undefined,\n    focusedOption: undefined,\n    focusMode: FocusMode.None,\n    filteredOptions: options,\n    inputValue: defaultOption ? defaultOption.label : '',\n    statusText: '',\n  }\n\n  const [state, dispatch] = useComboBox(\n    initialState,\n    options,\n    disableFiltering,\n    filter\n  )\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const listRef = useRef<HTMLUListElement>(null)\n  const focusedItemRef = useRef<HTMLLIElement>(null)\n\n  useEffect(() => {\n    state.filteredOptions = options\n  }, [options])\n\n  useEffect(() => {\n    onChange && onChange(state.selectedOption?.value || undefined)\n  }, [state.selectedOption])\n\n  useEffect(() => {\n    if (\n      state.focusMode === FocusMode.Item &&\n      state.focusedOption &&\n      focusedItemRef.current\n    ) {\n      focusedItemRef.current.focus()\n    }\n  }, [state.focusMode, state.focusedOption])\n\n  // When opened, the list should scroll to the closest match\n  useEffect(() => {\n    if (\n      state.isOpen &&\n      state.focusedOption &&\n      focusedItemRef.current &&\n      listRef.current &&\n      state.focusMode === FocusMode.Input\n    ) {\n      const optionBottom =\n        focusedItemRef.current.offsetTop + focusedItemRef.current.offsetHeight\n      const currentBottom =\n        listRef.current.scrollTop + listRef.current.offsetHeight\n\n      if (optionBottom > currentBottom) {\n        listRef.current.scrollTop = optionBottom - listRef.current.offsetHeight\n      }\n\n      if (focusedItemRef.current.offsetTop < listRef.current.scrollTop) {\n        listRef.current.scrollTop = focusedItemRef.current.offsetTop\n      }\n    }\n  }, [state.isOpen, state.focusedOption])\n\n  // If the focused element (activeElement) is outside of the combo box,\n  // make sure the focusMode is BLUR\n  useEffect(() => {\n    if (state.focusMode !== FocusMode.None) {\n      if (!containerRef.current?.contains(window.document.activeElement)) {\n        dispatch({\n          type: ActionTypes.BLUR,\n        })\n      }\n    }\n  }, [state.focusMode])\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (): void => dispatch({ type: ActionTypes.FOCUS_INPUT }),\n      clearSelection: (): void =>\n        dispatch({ type: ActionTypes.CLEAR_SELECTION }),\n    }),\n    []\n  )\n\n  const handleInputKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      dispatch({ type: ActionTypes.CLOSE_LIST })\n    } else if (event.key === 'ArrowDown' || event.key == 'Down') {\n      event.preventDefault()\n      dispatch({\n        type: ActionTypes.FOCUS_OPTION,\n        option:\n          state.selectedOption ||\n          state.focusedOption ||\n          state.filteredOptions[0],\n      })\n    } else if (event.key === 'Tab') {\n      // Clear button is not visible in this case so manually handle focus\n      if (state.isOpen && !state.selectedOption) {\n        // If there are filtered options, prevent default\n        // If there are \"No Results Found\", tab over to prevent a keyboard trap\n        const optionToFocus = disableFiltering\n          ? state.focusedOption\n          : state.selectedOption || state.focusedOption\n        if (optionToFocus) {\n          event.preventDefault()\n          dispatch({\n            type: ActionTypes.FOCUS_OPTION,\n            option: optionToFocus,\n          })\n        } else {\n          dispatch({\n            type: ActionTypes.BLUR,\n          })\n        }\n      }\n\n      if (!state.isOpen && state.selectedOption) {\n        dispatch({\n          type: ActionTypes.BLUR,\n        })\n      }\n    } else if (event.key === 'Enter') {\n      if (state.isOpen) {\n        event.preventDefault()\n        const exactMatch = state.filteredOptions.find(\n          (option) =>\n            option.label.toLowerCase() === state.inputValue.toLowerCase()\n        )\n        if (exactMatch) {\n          dispatch({\n            type: ActionTypes.SELECT_OPTION,\n            option: exactMatch,\n          })\n        } else {\n          if (state.selectedOption) {\n            dispatch({\n              type: ActionTypes.CLOSE_LIST,\n            })\n          } else {\n            dispatch({ type: ActionTypes.CLEAR })\n          }\n        }\n      }\n    }\n  }\n\n  const handleInputBlur = (event: FocusEvent<HTMLInputElement>): void => {\n    const { relatedTarget: newTarget } = event\n    const newTargetIsOutside =\n      !newTarget ||\n      (newTarget instanceof Node && !containerRef.current?.contains(newTarget))\n\n    if (newTargetIsOutside && state.focusMode !== FocusMode.None) {\n      dispatch({ type: ActionTypes.BLUR })\n    }\n  }\n\n  const handleClearKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Tab' && state.isOpen && state.selectedOption) {\n      event.preventDefault()\n      dispatch({\n        type: ActionTypes.FOCUS_OPTION,\n        option: state.selectedOption,\n      })\n    }\n  }\n\n  const focusSibling = (\n    dispatch: React.Dispatch<Action>,\n    state: State,\n    change: Direction\n  ): void => {\n    const currentIndex = state.focusedOption\n      ? state.filteredOptions.indexOf(state.focusedOption)\n      : -1\n    const firstOption = state.filteredOptions[0]\n    const lastOption = state.filteredOptions[state.filteredOptions.length - 1]\n\n    if (currentIndex === -1) {\n      dispatch({ type: ActionTypes.FOCUS_OPTION, option: firstOption })\n    } else {\n      const newIndex = currentIndex + change\n      if (newIndex < 0) {\n        dispatch({ type: ActionTypes.CLOSE_LIST })\n      } else if (newIndex >= state.filteredOptions.length) {\n        dispatch({ type: ActionTypes.FOCUS_OPTION, option: lastOption })\n      } else {\n        // eslint-disable-next-line security/detect-object-injection\n        const newOption = state.filteredOptions[newIndex]\n        dispatch({ type: ActionTypes.FOCUS_OPTION, option: newOption })\n      }\n    }\n  }\n\n  const handleListItemBlur = (event: FocusEvent<HTMLLIElement>): void => {\n    const { relatedTarget: newTarget } = event\n\n    if (\n      !newTarget ||\n      (newTarget instanceof Node && !containerRef.current?.contains(newTarget))\n    ) {\n      dispatch({ type: ActionTypes.BLUR })\n    }\n  }\n\n  const handleListItemKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      dispatch({ type: ActionTypes.CLOSE_LIST })\n    } else if (event.key === 'Tab' || event.key === 'Enter') {\n      event.preventDefault()\n      if (state.focusedOption) {\n        dispatch({\n          type: ActionTypes.SELECT_OPTION,\n          option: state.focusedOption,\n        })\n      }\n    } else if (event.key === 'ArrowDown' || event.key === 'Down') {\n      event.preventDefault()\n      focusSibling(dispatch, state, Direction.Next)\n    } else if (event.key === 'ArrowUp' || event.key === 'Up') {\n      event.preventDefault()\n      focusSibling(dispatch, state, Direction.Previous)\n    }\n  }\n\n  const isPristine =\n    state.selectedOption && state.selectedOption.label === state.inputValue\n\n  const containerClasses = classnames('usa-combo-box', className, {\n    'usa-combo-box--pristine': isPristine,\n  })\n\n  const listID = `${id}--list`\n  const assistiveHintID = `${id}--assistiveHint`\n\n  const focusedItemIndex = state.focusedOption\n    ? state.filteredOptions.findIndex((i) => i === state.focusedOption)\n    : -1\n  const focusedItemId =\n    focusedItemIndex > -1 && `${listID}--option-${focusedItemIndex}`\n\n  return (\n    <div\n      data-testid=\"combo-box\"\n      data-enhanced=\"true\"\n      className={containerClasses}\n      ref={containerRef}\n      {...props}>\n      <Select\n        className=\"usa-sr-only usa-combo-box__select\"\n        name={name}\n        aria-hidden\n        tabIndex={-1}\n        defaultValue={state.selectedOption?.value}\n        data-testid=\"combo-box-select\"\n        {...selectProps}>\n        {options.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </Select>\n      <ComboBoxInput\n        role=\"combobox\"\n        onChange={(e): void => {\n          if (inputProps?.onChange) {\n            // Allow a custom input onChange handler\n            inputProps?.onChange(e)\n          }\n\n          dispatch({ type: ActionTypes.UPDATE_FILTER, value: e.target.value })\n        }}\n        onClick={(): void => dispatch({ type: ActionTypes.OPEN_LIST })}\n        onBlur={handleInputBlur}\n        onKeyDown={handleInputKeyDown}\n        value={state.inputValue}\n        focused={state.focusMode === FocusMode.Input}\n        aria-owns={listID}\n        aria-controls={listID}\n        aria-autocomplete=\"list\"\n        aria-describedby={assistiveHintID}\n        aria-expanded={state.isOpen}\n        aria-activedescendant={(state.isOpen && focusedItemId) || ''}\n        id={id}\n        disabled={isDisabled}\n        {...inputProps}\n      />\n      <span className=\"usa-combo-box__clear-input__wrapper\" tabIndex={-1}>\n        <button\n          type=\"button\"\n          className=\"usa-combo-box__clear-input\"\n          aria-label=\"Clear the select contents\"\n          onClick={(): void => dispatch({ type: ActionTypes.CLEAR })}\n          data-testid=\"combo-box-clear-button\"\n          onKeyDown={handleClearKeyDown}\n          hidden={!isPristine || isDisabled}\n          disabled={isDisabled}>\n          &nbsp;\n        </button>\n      </span>\n      <span className=\"usa-combo-box__input-button-separator\">&nbsp;</span>\n      <span className=\"usa-combo-box__toggle-list__wrapper\" tabIndex={-1}>\n        <button\n          data-testid=\"combo-box-toggle\"\n          type=\"button\"\n          className=\"usa-combo-box__toggle-list\"\n          tabIndex={-1}\n          aria-label=\"Toggle the dropdown list\"\n          onClick={(): void =>\n            dispatch({\n              type: state.isOpen\n                ? ActionTypes.CLOSE_LIST\n                : ActionTypes.OPEN_LIST,\n            })\n          }\n          disabled={isDisabled}>\n          &nbsp;\n        </button>\n      </span>\n      <ul\n        data-testid=\"combo-box-option-list\"\n        tabIndex={-1}\n        id={listID}\n        className=\"usa-combo-box__list\"\n        role=\"listbox\"\n        ref={listRef}\n        hidden={!state.isOpen}\n        {...ulProps}>\n        {state.filteredOptions.map((option, index) => {\n          const focused = option === state.focusedOption\n          const selected = option === state.selectedOption\n          const itemClasses = classnames('usa-combo-box__list-option', {\n            'usa-combo-box__list-option--focused': focused,\n            'usa-combo-box__list-option--selected': selected,\n          })\n\n          return (\n            <li\n              ref={focused ? focusedItemRef : null}\n              value={option.value}\n              key={option.value}\n              className={itemClasses}\n              tabIndex={focused ? 0 : -1}\n              role=\"option\"\n              aria-selected={selected}\n              aria-setsize={state.filteredOptions.length}\n              aria-posinset={index + 1}\n              id={listID + `--option-${index}`}\n              onKeyDown={handleListItemKeyDown}\n              onBlur={handleListItemBlur}\n              data-testid={`combo-box-option-${option.value}`}\n              data-value={option.value}\n              onMouseEnter={(): void =>\n                dispatch({ type: ActionTypes.FOCUS_OPTION, option: option })\n              }\n              onClick={(): void => {\n                dispatch({ type: ActionTypes.SELECT_OPTION, option: option })\n              }}>\n              {option.label}\n            </li>\n          )\n        })}\n        {state.filteredOptions.length === 0 ? (\n          <li className=\"usa-combo-box__list-option--no-results\">\n            {noResults || 'No results found'}\n          </li>\n        ) : null}\n      </ul>\n\n      <div className=\"usa-combo-box__status usa-sr-only\" role=\"status\">\n        {state.statusText}\n      </div>\n      <span\n        id={assistiveHintID}\n        className=\"usa-sr-only\"\n        data-testid=\"combo-box-assistive-hint\">\n        {assistiveHint ||\n          `When autocomplete results are available use up and down arrows to review\n           and enter to select. Touch device users, explore by touch or with swipe\n           gestures.`}\n      </span>\n    </div>\n  )\n}\n\nconst ComboBox = forwardRef(ComboBoxForwardRef)\n\nexport default ComboBox\n"],"names":["ComboBoxForwardRef","id","name","className","options","defaultValue","disabled","onChange","assistiveHint","noResults","selectProps","inputProps","ulProps","customFilter","disableFiltering","props","ref","isDisabled","defaultOption","opt","filter","DEFAULT_FILTER","initialState","FocusMode","state","dispatch","useComboBox","containerRef","useRef","listRef","focusedItemRef","useEffect","_a","optionBottom","currentBottom","ActionTypes","useImperativeHandle","handleInputKeyDown","event","optionToFocus","exactMatch","option","handleInputBlur","newTarget","handleClearKeyDown","focusSibling","change","currentIndex","firstOption","lastOption","newIndex","newOption","handleListItemBlur","handleListItemKeyDown","Direction","isPristine","containerClasses","classnames","listID","assistiveHintID","focusedItemIndex","i","focusedItemId","jsxs","jsx","Select","ComboBoxInput","index","focused","selected","itemClasses","ComboBox","forwardRef"],"mappings":"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"}