{"version":3,"file":"utils.js","sources":["../../../../libSrc/components/forms/CharacterCount/utils.ts"],"sourcesContent":["/* Defaults\n  This is a fallback for character count and validation message.\n  In many cases, though, props will be passed in by consumer \n  for example, to account for i18n-aware strings\n*/\nexport const defaultCharacterCount = (text: string): number =>\n  Array.from(text).length\n\nexport const defaultMessage = (count: number, max: number): string => {\n  const emptyMessageFormat = `${max} characters allowed`\n  const remainingPluralFormat = '$0 characters left'\n  const remainingSingularFormat = '$0 character left'\n  const overSingularFormat = '$0 character over limit'\n  const overPluralFormat = '$0 characters over limit'\n  const remainingCount = max - count\n\n  switch (remainingCount) {\n    case max:\n      return emptyMessageFormat\n    case 1:\n      return remainingSingularFormat.replace('$0', '1')\n    case -1:\n      return overSingularFormat.replace('$0', '1')\n    default:\n      return remainingCount >= 0\n        ? remainingPluralFormat.replace('$0', remainingCount.toString())\n        : overPluralFormat.replace('$0', Math.abs(remainingCount).toString())\n  }\n}\n"],"names":["defaultCharacterCount","text","defaultMessage","count","max","emptyMessageFormat","remainingPluralFormat","remainingSingularFormat","overSingularFormat","overPluralFormat","remainingCount"],"mappings":"AAKO,MAAMA,IAAwB,CAACC,MACpC,MAAM,KAAKA,CAAI,EAAE,QAENC,IAAiB,CAACC,GAAeC,MAAwB;AAC9D,QAAAC,IAAqB,GAAGD,CAAG,uBAC3BE,IAAwB,sBACxBC,IAA0B,qBAC1BC,IAAqB,2BACrBC,IAAmB,4BACnBC,IAAiBN,IAAMD;AAE7B,UAAQO,GAAgB;AAAA,IACtB,KAAKN;AACI,aAAAC;AAAA,IACT,KAAK;AACI,aAAAE,EAAwB,QAAQ,MAAM,GAAG;AAAA,IAClD,KAAK;AACI,aAAAC,EAAmB,QAAQ,MAAM,GAAG;AAAA,IAC7C;AACE,aAAOE,KAAkB,IACrBJ,EAAsB,QAAQ,MAAMI,EAAe,SAAU,CAAA,IAC7DD,EAAiB,QAAQ,MAAM,KAAK,IAAIC,CAAc,EAAE,UAAU;AAAA,EAC1E;AACF;"}