{"version":3,"file":"CharacterCount.js","sources":["../../../../libSrc/components/forms/CharacterCount/CharacterCount.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport classnames from 'classnames'\n\nimport TextInput, { type TextInputProps } from '../TextInput/TextInput.js'\nimport Textarea, { type TextareaProps } from '../Textarea/Textarea.js'\nimport { defaultCharacterCount, defaultMessage } from './utils.js'\n\n/* Types */\nexport type BaseCharacterCountProps = {\n  id: string\n  name: string\n  maxLength: number\n  value?: string\n  defaultValue?: string\n  className?: string\n  isTextArea?: boolean\n  getCharacterCount?: (text: string) => number\n  getMessage?: (remainingCount: number, max: number) => string\n}\n\nexport type TextInputCharacterCountProps = BaseCharacterCountProps &\n  TextInputProps\n\nexport type TextareaCharacterCountProps = BaseCharacterCountProps &\n  TextareaProps &\n  JSX.IntrinsicElements['textarea']\n\nexport type CharacterCountProps =\n  | TextInputCharacterCountProps\n  | TextareaCharacterCountProps\n\n/* Main */\nconst CharacterCount = ({\n  id,\n  name,\n  className,\n  maxLength,\n  value = '',\n  defaultValue = '',\n  isTextArea = false,\n  getCharacterCount = defaultCharacterCount,\n  getMessage = defaultMessage,\n  ...remainingProps\n}: CharacterCountProps): React.ReactElement => {\n  const initialCount = getCharacterCount(value || defaultValue)\n  const [length, setLength] = useState(initialCount)\n  const [message, setMessage] = useState(getMessage(initialCount, maxLength))\n  const [isValid, setIsValid] = useState(initialCount < maxLength)\n  const srMessageRef = useRef<HTMLDivElement>(null)\n\n  const classes = classnames('usa-character-count__field', className)\n  const messageClasses = classnames('usa-hint', 'usa-character-count__status', {\n    'usa-character-count__status--invalid': !isValid,\n  })\n\n  useEffect(() => {\n    const message = getMessage(length, maxLength)\n    setMessage(message)\n    setIsValid(length <= maxLength)\n    // Updates the character count status for screen readers after a 1000ms delay\n    const timer = setTimeout(() => {\n      // Setting the text directly for VoiceOver compatibility.\n      if (srMessageRef.current) srMessageRef.current.textContent = message\n    }, 1000)\n    return () => clearTimeout(timer)\n  }, [length])\n\n  const handleBlur = (\n    e:\n      | React.FocusEvent<HTMLInputElement>\n      | React.FocusEvent<HTMLTextAreaElement>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback?: (e: any) => void\n  ): void => {\n    const validationMessage = !isValid ? 'The content is too long.' : ''\n    e.target.setCustomValidity(validationMessage)\n    if (callback) callback(e)\n  }\n\n  const handleChange = (\n    e:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback?: (e: any) => void\n  ): void => {\n    const {\n      target: { value = '' },\n    } = e\n    setLength(getCharacterCount(value))\n\n    if (callback) callback(e)\n  }\n\n  let InputComponent: React.ReactElement\n  if (isTextArea) {\n    const { onBlur, onChange, inputRef, ...textAreaProps } =\n      remainingProps as Partial<TextareaCharacterCountProps>\n\n    const attributes = {\n      id: id,\n      name: name,\n      className: classes,\n      ...(value ? { value: value } : { defaultValue: defaultValue }),\n      onBlur: (e: React.FocusEvent<HTMLTextAreaElement, Element>): void =>\n        handleBlur(e, onBlur),\n      onChange: (e: React.ChangeEvent<HTMLTextAreaElement>): void =>\n        handleChange(e, onChange),\n      inputRef: inputRef,\n      ...textAreaProps,\n    }\n    InputComponent = <Textarea {...attributes} />\n  } else {\n    const {\n      onBlur,\n      onChange,\n      inputRef,\n      type = 'text',\n      ...inputProps\n    } = remainingProps as Partial<TextInputCharacterCountProps>\n    const attributes = {\n      id: id,\n      type: type,\n      name: name,\n      className: classes,\n      ...(value ? { value: value } : { defaultValue: defaultValue }),\n      onBlur: (e: React.FocusEvent<HTMLInputElement, Element>): void =>\n        handleBlur(e, onBlur),\n      onChange: (e: React.ChangeEvent<HTMLInputElement>): void =>\n        handleChange(e, onChange),\n      inputRef: inputRef,\n      ...inputProps,\n    }\n    InputComponent = <TextInput {...attributes} />\n  }\n\n  return (\n    <>\n      {InputComponent}\n      <span className=\"usa-sr-only\" id={`${id}-info`}>\n        You can enter up to {maxLength} characters\n      </span>\n      <div\n        className={messageClasses}\n        aria-hidden=\"true\"\n        data-testid=\"characterCountMessage\">\n        {message}\n      </div>\n      <div\n        ref={srMessageRef}\n        className=\"usa-character-count__sr-status usa-sr-only\"\n        aria-live=\"polite\"\n        data-testid=\"characterCountSRMessage\"\n      />\n    </>\n  )\n}\n\nexport default CharacterCount\n"],"names":["CharacterCount","id","name","className","maxLength","value","defaultValue","isTextArea","getCharacterCount","defaultCharacterCount","getMessage","defaultMessage","remainingProps","initialCount","length","setLength","useState","message","setMessage","isValid","setIsValid","srMessageRef","useRef","classes","classnames","messageClasses","useEffect","timer","handleBlur","e","callback","validationMessage","handleChange","InputComponent","onBlur","onChange","inputRef","textAreaProps","attributes","jsx","Textarea","type","inputProps","TextInput","jsxs","Fragment"],"mappings":"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"}