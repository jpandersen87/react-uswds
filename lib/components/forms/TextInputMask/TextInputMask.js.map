{"version":3,"file":"TextInputMask.js","sources":["../../../../libSrc/components/forms/TextInputMask/TextInputMask.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport classnames from 'classnames'\nimport TextInput, { type TextInputProps } from '../TextInput/TextInput.js'\nimport { maskString } from './utils.js'\n\nexport type TextInputMaskProps = TextInputProps & {\n  mask: string\n  charset?: string\n}\n\nconst TextInputMask = ({\n  id,\n  className,\n  mask,\n  value: externalValue,\n  defaultValue,\n  charset,\n  onChange,\n  ...inputProps\n}: TextInputMaskProps): React.ReactElement => {\n  const classes = classnames(\n    {\n      'usa-masked': mask,\n    },\n    className\n  )\n\n  const [value, setValue] = useState(\n    // Ensure that this component preserves the expected behavior when a user sets the defaultValue\n    maskString((externalValue ?? defaultValue ?? ``) as string, mask, charset)\n  )\n  useEffect(() => {\n    // Make sure this component behaves correctly when used as a controlled component\n    setValue(\n      maskString(\n        ((externalValue ?? defaultValue) as string) ?? ``,\n        mask,\n        charset\n      )\n    )\n  }, [externalValue])\n  const [maskValue, setMaskValue] = useState(mask.substring(value.length))\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const newValue = maskString(e.target.value, mask, charset)\n\n    setMaskValue(mask.substring(newValue.length))\n    setValue(newValue)\n\n    // Ensure the new value is available to upstream onChange listeners\n    e.target.value = newValue\n\n    onChange?.(e)\n  }\n\n  return (\n    <span className=\"usa-input-mask\">\n      <span\n        className=\"usa-input-mask--content\"\n        aria-hidden\n        data-testid={`${id}Mask`}>\n        <i>{value}</i>\n        {maskValue}\n      </span>\n      <TextInput\n        data-testid=\"textInput\"\n        className={classes}\n        id={id}\n        maxLength={mask.length}\n        onChange={handleChange}\n        value={value}\n        {...inputProps}\n      />\n    </span>\n  )\n}\n\nexport default TextInputMask\n"],"names":["TextInputMask","id","className","mask","externalValue","defaultValue","charset","onChange","inputProps","classes","classnames","value","setValue","useState","maskString","useEffect","maskValue","setMaskValue","handleChange","e","newValue","jsxs","jsx","TextInput"],"mappings":";;;;;AAUA,MAAMA,IAAgB,CAAC;AAAA,EACrB,IAAAC;AAAA,EACA,WAAAC;AAAA,EACA,MAAAC;AAAA,EACA,OAAOC;AAAA,EACP,cAAAC;AAAA,EACA,SAAAC;AAAA,EACA,UAAAC;AAAA,EACA,GAAGC;AACL,MAA8C;AAC5C,QAAMC,IAAUC;AAAA,IACd;AAAA,MACE,cAAcP;AAAA,IAChB;AAAA,IACAD;AAAA,EAAA,GAGI,CAACS,GAAOC,CAAQ,IAAIC;AAAA;AAAA,IAExBC,EAAYV,KAAiBC,KAAgB,IAAeF,GAAMG,CAAO;AAAA,EAAA;AAE3E,EAAAS,EAAU,MAAM;AAEd,IAAAH;AAAA,MACEE;AAAA,QACIV,KAAiBC,KAA4B;AAAA,QAC/CF;AAAA,QACAG;AAAA,MACF;AAAA,IAAA;AAAA,EACF,GACC,CAACF,CAAa,CAAC;AACZ,QAAA,CAACY,GAAWC,CAAY,IAAIJ,EAASV,EAAK,UAAUQ,EAAM,MAAM,CAAC,GACjEO,IAAe,CAACC,MAAiD;AACrE,UAAMC,IAAWN,EAAWK,EAAE,OAAO,OAAOhB,GAAMG,CAAO;AAEzD,IAAAW,EAAad,EAAK,UAAUiB,EAAS,MAAM,CAAC,GAC5CR,EAASQ,CAAQ,GAGjBD,EAAE,OAAO,QAAQC,GAEjBb,KAAA,QAAAA,EAAWY;AAAA,EAAC;AAIZ,SAAA,gBAAAE,EAAC,QAAK,EAAA,WAAU,kBACd,UAAA;AAAA,IAAA,gBAAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAU;AAAA,QACV,eAAW;AAAA,QACX,eAAa,GAAGpB,CAAE;AAAA,QAClB,UAAA;AAAA,UAAA,gBAAAqB,EAAC,OAAG,UAAMX,EAAA,CAAA;AAAA,UACTK;AAAA,QAAA;AAAA,MAAA;AAAA,IACH;AAAA,IACA,gBAAAM;AAAA,MAACC;AAAA,MAAA;AAAA,QACC,eAAY;AAAA,QACZ,WAAWd;AAAA,QACX,IAAAR;AAAA,QACA,WAAWE,EAAK;AAAA,QAChB,UAAUe;AAAA,QACV,OAAAP;AAAA,QACC,GAAGH;AAAA,MAAA;AAAA,IACN;AAAA,EACF,EAAA,CAAA;AAEJ;"}