{"version":3,"file":"DateRangePicker.js","sources":["../../../../libSrc/components/forms/DateRangePicker/DateRangePicker.tsx"],"sourcesContent":["import classnames from 'classnames'\nimport React, { useState } from 'react'\nimport { DEFAULT_EXTERNAL_DATE_FORMAT } from '../datepicker/constants.js'\nimport DatePicker, {\n  type DatePickerProps,\n} from '../datepicker/DatePicker/DatePicker.js'\nimport { formatDate, parseDateString } from '../datepicker/utils.js'\nimport FormGroup from '../FormGroup/FormGroup.js'\nimport Label from '../label/Label/Label.js'\n\nexport type DateRangePickerProps = {\n  startDateLabel?: string\n  startDateHint?: string\n  startDatePickerProps: Omit<DatePickerProps, 'rangeDate'>\n  endDateLabel?: string\n  endDateHint?: string\n  endDatePickerProps: Omit<DatePickerProps, 'rangeDate'>\n  className?: string\n} & JSX.IntrinsicElements['div']\n\nconst DateRangePicker = ({\n  startDateLabel,\n  startDateHint,\n  startDatePickerProps,\n  endDateLabel,\n  endDateHint,\n  endDatePickerProps,\n  className,\n  ...props\n}: DateRangePickerProps): React.ReactElement => {\n  const [startDateInternalValue, setStartDateInternalValue] = useState<\n    string | undefined\n  >(startDatePickerProps.defaultValue)\n  const [endDateInternalValue, setEndDateInternalValue] = useState<\n    string | undefined\n  >(endDatePickerProps.defaultValue)\n\n  const getMaxStartDate = (): string | undefined => {\n    const { maxDate: maxStartDate } = startDatePickerProps\n    const parsedMaxStartDate = maxStartDate && parseDateString(maxStartDate)\n    const parsedCurrentEndDate =\n      endDateInternalValue && parseDateString(endDateInternalValue)\n\n    if (parsedCurrentEndDate && parsedMaxStartDate) {\n      if (parsedCurrentEndDate.getTime() < parsedMaxStartDate.getTime()) {\n        return formatDate(parsedCurrentEndDate)\n      } else {\n        return formatDate(parsedMaxStartDate)\n      }\n    } else {\n      return (\n        (parsedCurrentEndDate && formatDate(parsedCurrentEndDate)) ||\n        (parsedMaxStartDate && formatDate(parsedMaxStartDate)) ||\n        undefined\n      )\n    }\n  }\n\n  const getMinEndDate = (): string | undefined => {\n    const { minDate: minEndDate } = endDatePickerProps\n    const parsedMinEndDate = minEndDate && parseDateString(minEndDate)\n    const parsedCurrentStartDate =\n      startDateInternalValue && parseDateString(startDateInternalValue)\n\n    if (parsedCurrentStartDate && parsedMinEndDate) {\n      if (parsedCurrentStartDate.getTime() > parsedMinEndDate.getTime()) {\n        return formatDate(parsedCurrentStartDate)\n      } else {\n        return formatDate(parsedMinEndDate)\n      }\n    } else {\n      return (\n        (parsedCurrentStartDate && formatDate(parsedCurrentStartDate)) ||\n        (parsedMinEndDate && formatDate(parsedMinEndDate)) ||\n        undefined\n      )\n    }\n  }\n\n  const getDatePickerOnChangeFn = (\n    originalOnChangeFn: ((val?: string) => void) | undefined,\n    setStateInternalValueFn: React.Dispatch<\n      React.SetStateAction<string | undefined>\n    >\n  ): ((val?: string) => void) => {\n    return (externallyFormattedValue?: string | undefined): void => {\n      const parsedValue =\n        externallyFormattedValue &&\n        parseDateString(externallyFormattedValue, DEFAULT_EXTERNAL_DATE_FORMAT)\n\n      if (parsedValue) {\n        // The externally input and formatted value is a valid date.\n        // Convert to internal format and set the internal state to\n        // the selected date.\n        const internallyFormattedValue = formatDate(parsedValue)\n        setStateInternalValueFn(internallyFormattedValue)\n      } else {\n        // Externally input and formatted value is not a valid date.\n        // Do not attempt to convert to internal date format.\n        // Simply update internal state with the input value as received.\n        setStateInternalValueFn(externallyFormattedValue)\n      }\n\n      if (originalOnChangeFn) originalOnChangeFn(externallyFormattedValue)\n    }\n  }\n\n  const startDatePickerOnChange = getDatePickerOnChangeFn(\n    startDatePickerProps.onChange,\n    setStartDateInternalValue\n  )\n\n  const endDatePickerOnChange = getDatePickerOnChangeFn(\n    endDatePickerProps.onChange,\n    setEndDateInternalValue\n  )\n\n  const classes = classnames(className, 'usa-date-range-picker')\n  const startDatePickerClasses = classnames(\n    startDatePickerProps.className,\n    'usa-date-range-picker__range-start'\n  )\n  const endDatePickerClasses = classnames(\n    endDatePickerProps.className,\n    'usa-date-range-picker__range-end'\n  )\n\n  const startDatePickerLabelId = `${startDatePickerProps.id}-label`\n  const startDatePickerHintId = `${startDatePickerProps.id}-hint`\n\n  const endDatePickerLabelId = `${endDatePickerProps.id}-label`\n  const endDatePickerHintId = `${endDatePickerProps.id}-hint`\n\n  return (\n    <div className={classes} data-testid=\"date-range-picker\" {...props}>\n      <FormGroup>\n        {startDateLabel && (\n          <Label id={startDatePickerLabelId} htmlFor={startDatePickerProps.id}>\n            {startDateLabel}\n          </Label>\n        )}\n        {startDateHint && (\n          <div className=\"usa-hint\" id={startDatePickerHintId}>\n            {startDateHint}\n          </div>\n        )}\n        <DatePicker\n          className={startDatePickerClasses}\n          rangeDate={endDateInternalValue}\n          {...startDatePickerProps}\n          aria-labelledby={startDateLabel && startDatePickerLabelId}\n          aria-describedby={startDateHint && startDatePickerHintId}\n          onChange={startDatePickerOnChange}\n          maxDate={getMaxStartDate()}\n        />\n      </FormGroup>\n\n      <FormGroup>\n        {endDateLabel && (\n          <Label id={endDatePickerLabelId} htmlFor={endDatePickerProps.id}>\n            {endDateLabel}\n          </Label>\n        )}\n        {endDateHint && (\n          <div className=\"usa-hint\" id={endDatePickerHintId}>\n            {endDateHint}\n          </div>\n        )}\n        <DatePicker\n          className={endDatePickerClasses}\n          rangeDate={startDateInternalValue}\n          {...endDatePickerProps}\n          aria-labelledby={endDateLabel && endDatePickerLabelId}\n          aria-describedby={endDateHint && endDatePickerHintId}\n          onChange={endDatePickerOnChange}\n          minDate={getMinEndDate()}\n        />\n      </FormGroup>\n    </div>\n  )\n}\n\nexport default DateRangePicker\n"],"names":["DateRangePicker","startDateLabel","startDateHint","startDatePickerProps","endDateLabel","endDateHint","endDatePickerProps","className","props","startDateInternalValue","setStartDateInternalValue","useState","endDateInternalValue","setEndDateInternalValue","getMaxStartDate","maxStartDate","parsedMaxStartDate","parseDateString","parsedCurrentEndDate","formatDate","getMinEndDate","minEndDate","parsedMinEndDate","parsedCurrentStartDate","getDatePickerOnChangeFn","originalOnChangeFn","setStateInternalValueFn","externallyFormattedValue","parsedValue","DEFAULT_EXTERNAL_DATE_FORMAT","internallyFormattedValue","startDatePickerOnChange","endDatePickerOnChange","classes","classnames","startDatePickerClasses","endDatePickerClasses","startDatePickerLabelId","startDatePickerHintId","endDatePickerLabelId","endDatePickerHintId","jsxs","FormGroup","Label","jsx","DatePicker"],"mappings":"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"}