{"version":3,"file":"utils.js","sources":["../../../../libSrc/components/forms/datepicker/utils.tsx"],"sourcesContent":["import React, { type KeyboardEvent } from 'react'\n\nimport {\n  DEFAULT_EXTERNAL_DATE_FORMAT,\n  INTERNAL_DATE_FORMAT,\n} from './constants.js'\n\n/**\n * This file contains the USWDS DatePicker date manipulation functions converted to TypeScript\n */\n\n/**\n * Keep date within month. Month would only be over by 1 to 3 days\n *\n * @param {Date} dateToCheck the date object to check\n * @param {number} month the correct month\n * @returns {Date} the date, corrected if needed\n */\nexport const keepDateWithinMonth = (dateToCheck: Date, month: number): Date => {\n  if (month !== dateToCheck.getMonth()) {\n    dateToCheck.setDate(0)\n  }\n\n  return dateToCheck\n}\n\n/**\n * Set date from month day year\n *\n * @param {number} year the year to set\n * @param {number} month the month to set (zero-indexed)\n * @param {number} date the date to set\n * @returns {Date} the set date\n */\nexport const setDate = (year: number, month: number, date: number): Date => {\n  const newDate = new Date(0)\n  newDate.setFullYear(year, month, date)\n  return newDate\n}\n\n/**\n * todays date\n *\n * @returns {Date} todays date\n */\nexport const today = (): Date => {\n  const newDate = new Date()\n  const day = newDate.getDate()\n  const month = newDate.getMonth()\n  const year = newDate.getFullYear()\n  return setDate(year, month, day)\n}\n\n/**\n * Set date to first day of the month\n *\n * @param {Date} date the date to adjust\n * @returns {Date} the adjusted date\n */\nexport const startOfMonth = (date: Date): Date => {\n  const newDate = new Date(0)\n  newDate.setFullYear(date.getFullYear(), date.getMonth(), 1)\n  return newDate\n}\n\n/**\n * Set date to last day of the month\n *\n * @param {number} date the date to adjust\n * @returns {Date} the adjusted date\n */\nexport const lastDayOfMonth = (date: Date): Date => {\n  const newDate = new Date(0)\n  newDate.setFullYear(date.getFullYear(), date.getMonth() + 1, 0)\n  return newDate\n}\n\n/**\n * Add days to date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numDays the difference in days\n * @returns {Date} the adjusted date\n */\nexport const addDays = (date: Date, numDays: number): Date => {\n  const newDate = new Date(date.getTime())\n  newDate.setDate(newDate.getDate() + numDays)\n  return newDate\n}\n\n/**\n * Subtract days from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numDays the difference in days\n * @returns {Date} the adjusted date\n */\nexport const subDays = (date: Date, numDays: number): Date =>\n  addDays(date, -numDays)\n\n/**\n * Add weeks to date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\nexport const addWeeks = (date: Date, numWeeks: number): Date =>\n  addDays(date, numWeeks * 7)\n\n/**\n * Subtract weeks from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\nexport const subWeeks = (date: Date, numWeeks: number): Date =>\n  addWeeks(date, -numWeeks)\n\n/**\n * Set date to the start of the week (Sunday)\n *\n * @param {Date} _date the date to adjust\n * @returns {Date} the adjusted date\n */\nexport const startOfWeek = (date: Date): Date => {\n  const dayOfWeek = date.getDay()\n  return subDays(date, dayOfWeek)\n}\n\n/**\n * Set date to the end of the week (Saturday)\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\nexport const endOfWeek = (date: Date): Date => {\n  const dayOfWeek = date.getDay()\n  return addDays(date, 6 - dayOfWeek)\n}\n\n/**\n * Add months to date and keep date within month\n *\n * @param {Date} _date the date to adjust\n * @param {number} numMonths the difference in months\n * @returns {Date} the adjusted date\n */\nexport const addMonths = (date: Date, numMonths: number): Date => {\n  const newDate = new Date(date.getTime())\n  const dateMonth = (newDate.getMonth() + 12 + numMonths) % 12\n  newDate.setMonth(newDate.getMonth() + numMonths)\n  keepDateWithinMonth(newDate, dateMonth)\n  return newDate\n}\n\n/**\n * Subtract months from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numMonths the difference in months\n * @returns {Date} the adjusted date\n */\nexport const subMonths = (date: Date, numMonths: number): Date =>\n  addMonths(date, -numMonths)\n\n/**\n * Add years to date and keep date within month\n *\n * @param {Date} _date the date to adjust\n * @param {number} numYears the difference in years\n * @returns {Date} the adjusted date\n */\nexport const addYears = (date: Date, numYears: number): Date =>\n  addMonths(date, numYears * 12)\n\n/**\n * Subtract years from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numYears the difference in years\n * @returns {Date} the adjusted date\n */\nexport const subYears = (date: Date, numYears: number): Date =>\n  addYears(date, -numYears)\n\n/**\n * Set months of date\n *\n * @param {Date} _date the date to adjust\n * @param {number} month zero-indexed month to set\n * @returns {Date} the adjusted date\n */\nexport const setMonth = (date: Date, month: number): Date => {\n  const newDate = new Date(date.getTime())\n  newDate.setMonth(month)\n  keepDateWithinMonth(newDate, month)\n  return newDate\n}\n\n/**\n * Set year of date\n *\n * @param {Date} _date the date to adjust\n * @param {number} year the year to set\n * @returns {Date} the adjusted date\n */\nexport const setYear = (date: Date, year: number): Date => {\n  const newDate = new Date(date.getTime())\n  const month = newDate.getMonth()\n  newDate.setFullYear(year)\n  keepDateWithinMonth(newDate, month)\n  return newDate\n}\n\n/**\n * Return the earliest date\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {Date} the earliest date\n */\nexport const min = (dateA: Date, dateB: Date): Date => {\n  let newDate = dateA\n  if (dateB < dateA) {\n    newDate = dateB\n  }\n  return new Date(newDate.getTime())\n}\n\n/**\n * Return the latest date\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {Date} the latest date\n */\nexport const max = (dateA: Date, dateB: Date): Date => {\n  let newDate = dateA\n  if (dateB > dateA) {\n    newDate = dateB\n  }\n  return new Date(newDate.getTime())\n}\n\n/**\n * Check if dates are the in the same year\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {boolean} are dates in the same year\n */\nexport const isSameYear = (dateA: Date, dateB: Date): boolean => {\n  return dateA && dateB && dateA.getFullYear() === dateB.getFullYear()\n}\n\n/**\n * Check if dates are the in the same month\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {boolean} are dates in the same month\n */\nexport const isSameMonth = (dateA: Date, dateB: Date): boolean => {\n  return isSameYear(dateA, dateB) && dateA.getMonth() === dateB.getMonth()\n}\n\n/**\n * Check if dates are the same date\n *\n * @param {Date} dateA the date to compare\n * @param {Date} dateA the date to compare\n * @returns {boolean} are dates the same date\n */\nexport const isSameDay = (dateA: Date, dateB: Date): boolean => {\n  return isSameMonth(dateA, dateB) && dateA.getDate() === dateB.getDate()\n}\n\n/**\n * return a new date within minimum and maximum date\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @returns {Date} the date between min and max\n */\nexport const keepDateBetweenMinAndMax = (\n  date: Date,\n  minDate: Date,\n  maxDate?: Date\n): Date => {\n  let newDate = date\n\n  if (date < minDate) {\n    newDate = minDate\n  } else if (maxDate && date > maxDate) {\n    newDate = maxDate\n  }\n\n  return new Date(newDate.getTime())\n}\n\n/**\n * Check if dates is valid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is there a day within the month within min and max dates\n */\nexport const isDateWithinMinAndMax = (\n  date: Date,\n  minDate: Date,\n  maxDate?: Date\n): boolean => date >= minDate && (!maxDate || date <= maxDate)\n\n/**\n * Check if dates month is invalid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is the month outside min or max dates\n */\nexport const isDatesMonthOutsideMinOrMax = (\n  date: Date,\n  minDate: Date,\n  maxDate?: Date\n): boolean => {\n  return (\n    lastDayOfMonth(date) < minDate ||\n    (!!maxDate && startOfMonth(date) > maxDate)\n  )\n}\n\n/**\n * Check if dates year is invalid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is the month outside min or max dates\n */\nexport const isDatesYearOutsideMinOrMax = (\n  date: Date,\n  minDate: Date,\n  maxDate?: Date\n): boolean => {\n  return (\n    lastDayOfMonth(setMonth(date, 11)) < minDate ||\n    (!!maxDate && startOfMonth(setMonth(date, 0)) > maxDate)\n  )\n}\n\n/**\n * Parse a date with format M-D-YY\n *\n * @param {string} dateString the date string to parse\n * @param {string} dateFormat the format of the date string\n * @param {boolean} adjustDate should the date be adjusted\n * @returns {Date} the parsed date\n */\nexport const parseDateString = (\n  dateString: string,\n  dateFormat: string = INTERNAL_DATE_FORMAT,\n  adjustDate = false\n): Date | undefined => {\n  let date\n  let month\n  let day\n  let year\n  let parsed\n\n  if (dateString) {\n    let monthStr, dayStr, yearStr\n\n    if (dateFormat === DEFAULT_EXTERNAL_DATE_FORMAT) {\n      ;[monthStr, dayStr, yearStr] = dateString.split('/')\n    } else {\n      ;[yearStr, monthStr, dayStr] = dateString.split('-')\n    }\n\n    if (yearStr) {\n      parsed = parseInt(yearStr, 10)\n      if (!Number.isNaN(parsed)) {\n        year = parsed\n        if (adjustDate) {\n          year = Math.max(0, year)\n          if (yearStr.length < 3) {\n            const currentYear = today().getFullYear()\n            const currentYearStub =\n              currentYear - (currentYear % 10 ** yearStr.length)\n            year = currentYearStub + parsed\n          }\n        }\n      }\n    }\n\n    if (monthStr) {\n      parsed = parseInt(monthStr, 10)\n      if (!Number.isNaN(parsed)) {\n        month = parsed\n        if (adjustDate) {\n          month = Math.max(1, month)\n          month = Math.min(12, month)\n        }\n      }\n    }\n\n    if (month && dayStr && year != null) {\n      parsed = parseInt(dayStr, 10)\n      if (!Number.isNaN(parsed)) {\n        day = parsed\n        if (adjustDate) {\n          const lastDayOfMonth = setDate(year, month, 0).getDate()\n          day = Math.max(1, day)\n          day = Math.min(lastDayOfMonth, day)\n        }\n      }\n    }\n\n    if (month && day && year != null) {\n      date = setDate(year, month - 1, day)\n    }\n  }\n\n  return date\n}\n\n/**\n * Format a date to format YYYY-MM-DD\n *\n * @param {Date} date the date to format\n * @param {string} dateFormat the format of the date string\n * @returns {string} the formatted date string\n */\nexport const formatDate = (\n  date: Date,\n  dateFormat: string = INTERNAL_DATE_FORMAT\n): string => {\n  const padZeros = (value: number, length: number): string => {\n    return `0000${value}`.slice(-length)\n  }\n\n  const month = date.getMonth() + 1\n  const day = date.getDate()\n  const year = date.getFullYear()\n\n  if (dateFormat === DEFAULT_EXTERNAL_DATE_FORMAT) {\n    return [padZeros(month, 2), padZeros(day, 2), padZeros(year, 4)].join('/')\n  }\n\n  return [padZeros(year, 4), padZeros(month, 2), padZeros(day, 2)].join('-')\n}\n\n// VALIDATION\n\nexport const isDateInvalid = (\n  dateString: string,\n  minDate: Date,\n  maxDate?: Date\n): boolean => {\n  let isInvalid = false\n\n  if (dateString) {\n    isInvalid = true\n\n    const dateStringParts = dateString.split('/')\n    const [month, day, year] = dateStringParts.map((str) => {\n      let value\n      const parsed = parseInt(str, 10)\n      if (!Number.isNaN(parsed)) value = parsed\n      return value\n    })\n\n    if (month && day && year != null) {\n      const checkDate = setDate(year, month - 1, day)\n\n      if (\n        checkDate.getMonth() === month - 1 &&\n        checkDate.getDate() === day &&\n        checkDate.getFullYear() === year &&\n        dateStringParts[2].length === 4 &&\n        isDateWithinMinAndMax(checkDate, minDate, maxDate)\n      ) {\n        isInvalid = false\n      }\n    }\n  }\n\n  return isInvalid\n}\n\n// RENDERING TABLES\n\nexport const listToTable = (\n  list: React.ReactNode[],\n  rowSize: number\n): React.ReactNode => {\n  const rows = []\n  let i = 0\n\n  while (i < list.length) {\n    const row = []\n    while (i < list.length && row.length < rowSize) {\n      row.push(list[parseInt(`${i}`)])\n      i += 1\n    }\n    rows.push(row)\n  }\n\n  return (\n    <>\n      {rows.map((r, rIndex) => (\n        <tr key={`row_${rIndex}`}>\n          {r.map((cell, cIndex) => (\n            <td key={`row_${rIndex}_cell_${cIndex}`}>{cell}</td>\n          ))}\n        </tr>\n      ))}\n    </>\n  )\n}\n\nexport const handleTabKey = (\n  event: KeyboardEvent,\n  focusableEl: Array<HTMLButtonElement | null>\n): void => {\n  if (event.key === 'Tab') {\n    const focusable = focusableEl.filter((el) => el && !el.disabled)\n    const activeElement = document?.activeElement\n\n    const firstTabIndex = 0\n    const lastTabIndex = focusable.length - 1\n    const firstTabStop = focusable[parseInt(`${firstTabIndex}`)]\n    const lastTabStop = focusable[parseInt(`${lastTabIndex}`)]\n    const focusIndex =\n      activeElement instanceof HTMLButtonElement\n        ? focusable.indexOf(activeElement)\n        : -1\n\n    const isLastTab = focusIndex === lastTabIndex\n    const isFirstTab = focusIndex === firstTabIndex\n    const isNotFound = focusIndex === -1\n\n    if (event.shiftKey) {\n      // Tab backwards\n      if (isFirstTab || isNotFound) {\n        event.preventDefault()\n        lastTabStop?.focus()\n      }\n    } else {\n      // Tab forwards\n      if (isLastTab || isNotFound) {\n        event.preventDefault()\n        firstTabStop?.focus()\n      }\n    }\n  }\n}\n\n// iOS detection from: http://stackoverflow.com/a/9039885/177710\nexport const isIosDevice = (): boolean =>\n  typeof navigator !== 'undefined' &&\n  (navigator.userAgent.match(/(iPod|iPhone|iPad)/g) ||\n    (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\n  !window.MSStream\n\nexport const CalendarModes = {\n  DATE_PICKER: 'DATE_PICKER',\n  MONTH_PICKER: 'MONTH_PICKER',\n  YEAR_PICKER: 'YEAR_PICKER',\n} as const\n\nexport type CalendarMode = (typeof CalendarModes)[keyof typeof CalendarModes]\n"],"names":["keepDateWithinMonth","dateToCheck","month","setDate","year","date","newDate","today","day","startOfMonth","lastDayOfMonth","addDays","numDays","subDays","addWeeks","numWeeks","subWeeks","startOfWeek","dayOfWeek","endOfWeek","addMonths","numMonths","dateMonth","subMonths","addYears","numYears","subYears","setMonth","setYear","min","dateA","dateB","max","isSameYear","isSameMonth","isSameDay","keepDateBetweenMinAndMax","minDate","maxDate","isDateWithinMinAndMax","isDatesMonthOutsideMinOrMax","isDatesYearOutsideMinOrMax","parseDateString","dateString","dateFormat","INTERNAL_DATE_FORMAT","adjustDate","parsed","monthStr","dayStr","yearStr","DEFAULT_EXTERNAL_DATE_FORMAT","currentYear","formatDate","padZeros","value","length","isDateInvalid","isInvalid","dateStringParts","str","checkDate","listToTable","list","rowSize","rows","i","row","jsx","Fragment","rIndex","cell","cIndex","handleTabKey","event","focusableEl","focusable","el","activeElement","firstTabIndex","lastTabIndex","firstTabStop","lastTabStop","focusIndex","isLastTab","isFirstTab","isNotFound","isIosDevice","CalendarModes"],"mappings":"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"}