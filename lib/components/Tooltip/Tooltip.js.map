{"version":3,"file":"Tooltip.js","sources":["../../../libSrc/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import React, {\n  createElement,\n  type ForwardRefExoticComponent,\n  type ReactElement,\n  type ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport classnames from 'classnames'\n\nimport {\n  isElementInViewport,\n  calculateMarginOffset,\n  isCustomProps,\n} from './utils.js'\nimport { TRIANGLE_SIZE } from './constants.js'\nimport Button from '../Button/Button.js'\n\nexport type BaseTooltipProps<T> = {\n  label: ReactNode\n  title?: string\n  position?: 'top' | 'bottom' | 'left' | 'right' | undefined\n  wrapperclasses?: string\n  className?: string\n  children: ReactNode\n} & T\n\nexport interface WithCustomTooltipProps<T> {\n  asCustom: ForwardRefExoticComponent<T>\n}\n\nexport type DefaultTooltipProps = BaseTooltipProps<\n  JSX.IntrinsicElements['button']\n>\n\nexport type CustomTooltipProps<T> = BaseTooltipProps<T> &\n  WithCustomTooltipProps<T>\n\nexport type TooltipProps<T> = DefaultTooltipProps | CustomTooltipProps<T>\n\nfunction Tooltip(props: DefaultTooltipProps): ReactElement\nfunction Tooltip<T>(props: CustomTooltipProps<T>): ReactElement\nfunction Tooltip<\n  FCProps extends React.PropsWithChildren<object> = DefaultTooltipProps,\n>(props: TooltipProps<FCProps>): ReactElement {\n  const triggerElementRef = useRef<HTMLElement & HTMLButtonElement>(null)\n  const tooltipBodyRef = useRef<HTMLElement>(null)\n  const tooltipID = useRef(\n    `tooltip-${Math.floor(Math.random() * 900000) + 100000}`\n  )\n\n  const [isVisible, setVisible] = useState(false)\n  const [isShown, setIsShown] = useState(false)\n  const [effectivePosition, setEffectivePosition] = useState<\n    'top' | 'bottom' | 'left' | 'right' | undefined\n  >(undefined)\n  const [positioningAttempts, setPositionAttempts] = useState(0)\n  const [wrapTooltip, setWrapTooltip] = useState(false)\n  const [positionStyles, setPositionStyles] = useState({})\n\n  const { position, wrapperclasses, className } = props\n\n  const positionTop = (e: HTMLElement, triggerEl: HTMLElement): void => {\n    const topMargin = calculateMarginOffset('top', e.offsetHeight, triggerEl)\n    const leftMargin = calculateMarginOffset('left', e.offsetWidth, triggerEl)\n\n    setEffectivePosition('top')\n    setPositionStyles({\n      left: `50%`,\n      top: `-${TRIANGLE_SIZE}px`,\n      margin: `-${topMargin}px 0 0 -${leftMargin / 2}px`,\n    })\n  }\n\n  const positionBottom = (e: HTMLElement, triggerEl: HTMLElement): void => {\n    const leftMargin = calculateMarginOffset('left', e.offsetWidth, triggerEl)\n\n    setEffectivePosition('bottom')\n    setPositionStyles({\n      left: `50%`,\n      margin: `${TRIANGLE_SIZE}px 0 0 -${leftMargin / 2}px`,\n    })\n  }\n\n  const positionRight = (e: HTMLElement, triggerEl: HTMLElement): void => {\n    const topMargin = calculateMarginOffset('top', e.offsetHeight, triggerEl)\n\n    setEffectivePosition('right')\n    setPositionStyles({\n      top: `50%`,\n      left: `${triggerEl.offsetLeft + triggerEl.offsetWidth + TRIANGLE_SIZE}px`,\n      margin: `-${topMargin / 2}px 0 0 0`,\n    })\n  }\n\n  const positionLeft = (e: HTMLElement, triggerEl: HTMLElement): void => {\n    const topMargin = calculateMarginOffset('top', e.offsetHeight, triggerEl)\n    const leftMargin = calculateMarginOffset(\n      'left',\n      triggerEl.offsetLeft > e.offsetWidth\n        ? triggerEl.offsetLeft - e.offsetWidth\n        : e.offsetWidth,\n      triggerEl\n    )\n\n    setEffectivePosition('left')\n    setPositionStyles({\n      top: `50%`,\n      left: `-${TRIANGLE_SIZE}px`,\n      margin: `-${topMargin / 2}px 0 0 ${\n        triggerEl.offsetLeft > e.offsetWidth ? leftMargin : -leftMargin\n      }px`,\n    })\n  }\n\n  const positions = [positionTop, positionBottom, positionRight, positionLeft]\n  const MAX_ATTEMPTS = positions.length\n\n  useEffect(() => {\n    // When position/styles change, check if in viewport\n    if (isVisible && triggerElementRef.current && tooltipBodyRef.current) {\n      const tooltipTrigger = triggerElementRef.current\n      const tooltipBody = tooltipBodyRef.current\n\n      const isInViewport = isElementInViewport(tooltipBody)\n\n      if (isInViewport) {\n        // We're good, show the tooltip\n        setIsShown(true)\n      } else {\n        // Try the next position\n        const attempt = positioningAttempts\n        if (attempt < MAX_ATTEMPTS || wrapTooltip === false) {\n          setPositionAttempts((a) => a + 1)\n\n          if (attempt < MAX_ATTEMPTS) {\n            const pos = positions[parseInt(`${attempt}`)]\n            pos(tooltipBody, tooltipTrigger)\n          } else {\n            // Try wrapping\n            setWrapTooltip(true)\n            setPositionAttempts(0)\n          }\n        } else {\n          // No visible position found - this may mean your tooltip contents is too long!\n          console.warn(\n            'No visible position found - this may mean your tooltip contents is too long!'\n          )\n        }\n      }\n    }\n  }, [effectivePosition, positionStyles, wrapTooltip])\n\n  useEffect(() => {\n    if (!isVisible) {\n      // Hide tooltip\n      setIsShown(false)\n      setWrapTooltip(false)\n      setPositionAttempts(0)\n    } else {\n      // Show tooltip\n      if (triggerElementRef.current && tooltipBodyRef.current) {\n        const tooltipTrigger = triggerElementRef.current\n        const tooltipBody = tooltipBodyRef.current\n\n        switch (position) {\n          case 'top':\n            positionTop(tooltipBody, tooltipTrigger)\n            break\n          case 'bottom':\n            positionBottom(tooltipBody, tooltipTrigger)\n            break\n          case 'right':\n            positionRight(tooltipBody, tooltipTrigger)\n            break\n          case 'left':\n            positionLeft(tooltipBody, tooltipTrigger)\n            break\n\n          default:\n            // skip default case\n            break\n        }\n      }\n    }\n  }, [isVisible])\n\n  const showTooltip = (): void => {\n    setVisible(true)\n  }\n  const hideTooltip = (): void => {\n    setVisible(false)\n  }\n\n  const wrapperClasses = classnames('usa-tooltip', wrapperclasses)\n\n  const tooltipBodyClasses = classnames('usa-tooltip__body', {\n    'is-set': isVisible,\n    'usa-tooltip__body--top': effectivePosition === 'top',\n    'usa-tooltip__body--bottom': effectivePosition === 'bottom',\n    'usa-tooltip__body--right': effectivePosition === 'right',\n    'usa-tooltip__body--left': effectivePosition === 'left',\n    'is-visible': isShown, // isShown is set after positioning updated, to prevent jitter when position changes\n    'usa-tooltip__body--wrap': isVisible && wrapTooltip,\n  })\n\n  if (isCustomProps(props)) {\n    const { label, title, asCustom, children, className, ...remainingProps } =\n      props\n    const customProps: FCProps = remainingProps as unknown as FCProps\n\n    const triggerClasses = classnames('usa-tooltip__trigger', className)\n\n    const triggerElement = createElement(\n      asCustom,\n      {\n        ref: triggerElementRef,\n        'data-testid': 'triggerElement',\n        'aria-describedby': tooltipID.current,\n        tabIndex: 0,\n        title: '',\n        onMouseEnter: showTooltip,\n        onMouseOver: showTooltip,\n        onFocus: showTooltip,\n        onMouseLeave: hideTooltip,\n        onBlur: hideTooltip,\n        onKeyDown: hideTooltip,\n        className: triggerClasses,\n        ...customProps,\n      },\n      children\n    )\n\n    return (\n      <span data-testid=\"tooltipWrapper\" className={wrapperClasses}>\n        {triggerElement}\n        <span\n          data-testid=\"tooltipBody\"\n          title={title ?? (typeof label === 'string' ? label : undefined)}\n          id={tooltipID.current}\n          ref={tooltipBodyRef}\n          className={tooltipBodyClasses}\n          role=\"tooltip\"\n          aria-hidden={!isVisible}\n          style={positionStyles}>\n          {label}\n        </span>\n      </span>\n    )\n  } else {\n    const { label, title, children, ...remainingProps } = props\n\n    const triggerClasses = classnames('usa-tooltip__trigger', className)\n\n    return (\n      <span data-testid=\"tooltipWrapper\" className={wrapperClasses}>\n        <Button\n          data-testid=\"triggerElement\"\n          ref={triggerElementRef}\n          aria-describedby={tooltipID.current}\n          tabIndex={0}\n          type=\"button\"\n          className={triggerClasses}\n          title=\"\"\n          onMouseEnter={showTooltip}\n          onMouseOver={showTooltip}\n          onFocus={showTooltip}\n          onMouseLeave={hideTooltip}\n          onBlur={hideTooltip}\n          onKeyDown={hideTooltip}\n          {...remainingProps}>\n          {children}\n        </Button>\n        <span\n          data-testid=\"tooltipBody\"\n          title={title ?? (typeof label === 'string' ? label : undefined)}\n          id={tooltipID.current}\n          ref={tooltipBodyRef}\n          className={tooltipBodyClasses}\n          role=\"tooltip\"\n          aria-hidden={!isVisible}\n          style={positionStyles}>\n          {label}\n        </span>\n      </span> // the span that wraps the element with have the tooltip class\n    )\n  }\n}\n\nTooltip.defaultProps = {\n  position: 'top',\n}\n\nexport default Tooltip\n"],"names":["Tooltip","props","triggerElementRef","useRef","tooltipBodyRef","tooltipID","isVisible","setVisible","useState","isShown","setIsShown","effectivePosition","setEffectivePosition","positioningAttempts","setPositionAttempts","wrapTooltip","setWrapTooltip","positionStyles","setPositionStyles","position","wrapperclasses","className","positionTop","e","triggerEl","topMargin","calculateMarginOffset","leftMargin","TRIANGLE_SIZE","positionBottom","positionRight","positionLeft","positions","MAX_ATTEMPTS","useEffect","tooltipTrigger","tooltipBody","isElementInViewport","attempt","a","pos","showTooltip","hideTooltip","wrapperClasses","classnames","tooltipBodyClasses","isCustomProps","label","title","asCustom","children","remainingProps","customProps","triggerClasses","triggerElement","createElement","jsxs","jsx","Button"],"mappings":"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"}