{"version":3,"file":"LanguageSelector.js","sources":["../../../../libSrc/components/languageselector/LanguageSelector/LanguageSelector.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport classnames from 'classnames'\nimport LanguageSelectorButton from '../LanguageSelectorButton/LanguageSelectorButton.js'\nimport LanguageSelectorDropdown from '../LanguageSelectorDropdown/LanguageSelectorDropdown.js'\n\nexport type LanguageDefinition = {\n  label: string\n  label_local?: string\n  attr: string\n  on_click: string | (() => void)\n}\n\nexport type LanguageSelectorProps = {\n  label?: string\n  langs: LanguageDefinition[]\n  small?: boolean\n  className?: string\n  displayLang?: string\n} & JSX.IntrinsicElements['div']\n\nconst LanguageSelector = ({\n  label,\n  langs,\n  small,\n  className,\n  displayLang,\n  ...divProps\n}: LanguageSelectorProps): React.ReactElement => {\n  const classes = classnames(\n    'usa-language-container',\n    {\n      [`usa-language--small`]: small !== undefined,\n    },\n    className\n  )\n\n  const [langIndex, setLangIndex] = useState(false)\n  if (langs.length > 2) {\n    const dropdownProps = { label, langs, small, displayLang }\n    return <LanguageSelectorDropdown {...dropdownProps} className={className} />\n  } else {\n    if (label) {\n      console.warn(\n        \"LanguageSelector's label is not used when only two languages are available.\"\n      )\n    }\n    const curLang =\n      langs.find((langDef) => langDef.attr === displayLang) ||\n      langs[Number(langIndex)]\n    const onClickString: string =\n      typeof curLang.on_click === 'string' ? curLang.on_click : ''\n    const onClick =\n      typeof curLang.on_click === 'string'\n        ? () => {\n            window.location.assign(onClickString)\n          }\n        : curLang.on_click\n    return (\n      <div className={classes} data-testid=\"languageSelector\" {...divProps}>\n        <LanguageSelectorButton\n          className={classes}\n          label={curLang.label}\n          labelAttr={curLang.attr}\n          onToggle={() => {\n            onClick()\n            if (!displayLang) setLangIndex((prevLangIndex) => !prevLangIndex)\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default LanguageSelector\n"],"names":["LanguageSelector","label","langs","small","className","displayLang","divProps","classes","classnames","langIndex","setLangIndex","useState","jsx","LanguageSelectorDropdown","curLang","langDef","onClickString","onClick","LanguageSelectorButton","prevLangIndex"],"mappings":";;;;;AAoBA,MAAMA,IAAmB,CAAC;AAAA,EACxB,OAAAC;AAAA,EACA,OAAAC;AAAA,EACA,OAAAC;AAAA,EACA,WAAAC;AAAA,EACA,aAAAC;AAAA,EACA,GAAGC;AACL,MAAiD;AAC/C,QAAMC,IAAUC;AAAA,IACd;AAAA,IACA;AAAA,MACG,uBAAwBL,MAAU;AAAA,IACrC;AAAA,IACAC;AAAA,EAAA,GAGI,CAACK,GAAWC,CAAY,IAAIC,EAAS,EAAK;AAC5C,MAAAT,EAAM,SAAS;AAEjB,WAAQ,gBAAAU,EAAAC,GAAA,EAA0B,GADZ,EAAE,OAAAZ,GAAO,OAAAC,GAAO,OAAAC,GAAO,aAAAE,EAAY,GACL,WAAAD,EAAsB,CAAA;AACrE;AACL,IAAIH,KACM,QAAA;AAAA,MACN;AAAA,IAAA;AAGJ,UAAMa,IACJZ,EAAM,KAAK,CAACa,MAAYA,EAAQ,SAASV,CAAW,KACpDH,EAAM,OAAOO,CAAS,CAAC,GACnBO,IACJ,OAAOF,EAAQ,YAAa,WAAWA,EAAQ,WAAW,IACtDG,IACJ,OAAOH,EAAQ,YAAa,WACxB,MAAM;AACG,aAAA,SAAS,OAAOE,CAAa;AAAA,IAAA,IAEtCF,EAAQ;AACd,6BACG,OAAI,EAAA,WAAWP,GAAS,eAAY,oBAAoB,GAAGD,GAC1D,UAAA,gBAAAM;AAAA,MAACM;AAAA,MAAA;AAAA,QACC,WAAWX;AAAA,QACX,OAAOO,EAAQ;AAAA,QACf,WAAWA,EAAQ;AAAA,QACnB,UAAU,MAAM;AACN,UAAAG,KACHZ,KAA0BK,EAAA,CAACS,MAAkB,CAACA,CAAa;AAAA,QAClE;AAAA,MAAA;AAAA,IAEJ,EAAA,CAAA;AAAA,EAEJ;AACF;"}