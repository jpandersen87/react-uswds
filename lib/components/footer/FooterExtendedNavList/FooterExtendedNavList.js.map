{"version":3,"file":"FooterExtendedNavList.js","sources":["../../../../libSrc/components/footer/FooterExtendedNavList/FooterExtendedNavList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport FooterExtendedNavListSection from './FooterExtendedNavListSection.js'\nimport Grid, { type GridProps } from '../../grid/Grid/Grid.js'\n\nexport type ExtendedNavLinksType = React.ReactNode[][]\n\nexport type FooterExtendedNavListProps = {\n  isMobile?: boolean\n  /* \n    Turn on mobile styles via prop. If undefined, a fallback is used based on the client window width.\n  */\n  /* \n    Multidimensional array of grouped nav links. Sub-arrays are column sections, first element is used as a heading.\n  */\n  nestedLinks: ExtendedNavLinksType\n} & GridProps\n\nconst FooterExtendedNavList = ({\n  isMobile,\n  nestedLinks,\n  ...props\n}: FooterExtendedNavListProps): React.ReactElement => {\n  const isClient = window && typeof window === 'object'\n\n  const [isMobileFallback, setIsMobileFallback] = React.useState<boolean>(\n    isClient && window.innerWidth < 480\n  )\n  const [sectionsOpenState, setSectionsOpenState] = useState<boolean[]>(\n    Array(nestedLinks.length).fill(false)\n  )\n\n  // Use isMobile prop, fallback to calculated state if undefined\n  const useMobile = isMobile || (isMobile === undefined && isMobileFallback)\n\n  useEffect(() => {\n    if (isMobile) return\n\n    function handleResize(): void {\n      const updatedIsMobileFallback = isClient && window.innerWidth < 480\n      if (updatedIsMobileFallback !== isMobileFallback) {\n        setIsMobileFallback(updatedIsMobileFallback)\n      }\n    }\n\n    window.addEventListener('resize', handleResize)\n    return (): void => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  const onToggle = (index: number): void => {\n    setSectionsOpenState((prevIsOpen) => {\n      const newIsOpen = Array(nestedLinks.length).fill(false)\n      // eslint-disable-next-line security/detect-object-injection\n      newIsOpen[index] = !prevIsOpen[index]\n      return newIsOpen\n    })\n  }\n\n  return (\n    <Grid row gap={4} {...props}>\n      {nestedLinks.map((links, i) => (\n        <Grid\n          mobileLg={{ col: 6 }}\n          desktop={{ col: 3 }}\n          key={`linkSection-${i}`}>\n          <FooterExtendedNavListSection\n            onToggle={useMobile ? (): void => onToggle(i) : undefined}\n            // eslint-disable-next-line security/detect-object-injection\n            isOpen={useMobile ? sectionsOpenState[i] : true}\n            links={links}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nexport default FooterExtendedNavList\n"],"names":["FooterExtendedNavList","isMobile","nestedLinks","props","isClient","isMobileFallback","setIsMobileFallback","React","sectionsOpenState","setSectionsOpenState","useState","useMobile","useEffect","handleResize","updatedIsMobileFallback","onToggle","index","prevIsOpen","newIsOpen","jsx","Grid","links","i","FooterExtendedNavListSection"],"mappings":";;;;AAiBA,MAAMA,IAAwB,CAAC;AAAA,EAC7B,UAAAC;AAAA,EACA,aAAAC;AAAA,EACA,GAAGC;AACL,MAAsD;AAC9C,QAAAC,IAAW,UAAU,OAAO,UAAW,UAEvC,CAACC,GAAkBC,CAAmB,IAAIC,EAAM;AAAA,IACpDH,KAAY,OAAO,aAAa;AAAA,EAAA,GAE5B,CAACI,GAAmBC,CAAoB,IAAIC;AAAA,IAChD,MAAMR,EAAY,MAAM,EAAE,KAAK,EAAK;AAAA,EAAA,GAIhCS,IAAYV,KAAaA,MAAa,UAAaI;AAEzD,EAAAO,EAAU,MAAM;AACV,QAAAX;AAAU;AAEd,aAASY,IAAqB;AACtB,YAAAC,IAA0BV,KAAY,OAAO,aAAa;AAChE,MAAIU,MAA4BT,KAC9BC,EAAoBQ,CAAuB;AAAA,IAE/C;AAEO,kBAAA,iBAAiB,UAAUD,CAAY,GACvC,MAAY,OAAO,oBAAoB,UAAUA,CAAY;AAAA,EACtE,GAAG,CAAE,CAAA;AAEC,QAAAE,IAAW,CAACC,MAAwB;AACxC,IAAAP,EAAqB,CAACQ,MAAe;AACnC,YAAMC,IAAY,MAAMhB,EAAY,MAAM,EAAE,KAAK,EAAK;AAEtD,aAAAgB,EAAUF,CAAK,IAAI,CAACC,EAAWD,CAAK,GAC7BE;AAAA,IAAA,CACR;AAAA,EAAA;AAGH,SACG,gBAAAC,EAAAC,GAAA,EAAK,KAAG,IAAC,KAAK,GAAI,GAAGjB,GACnB,UAAYD,EAAA,IAAI,CAACmB,GAAOC,MACvB,gBAAAH;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,UAAU,EAAE,KAAK,EAAE;AAAA,MACnB,SAAS,EAAE,KAAK,EAAE;AAAA,MAElB,UAAA,gBAAAD;AAAA,QAACI;AAAA,QAAA;AAAA,UACC,UAAUZ,IAAY,MAAYI,EAASO,CAAC,IAAI;AAAA,UAEhD,QAAQX,IAAYH,EAAkBc,CAAC,IAAI;AAAA,UAC3C,OAAAD;AAAA,QAAA;AAAA,MACF;AAAA,IAAA;AAAA,IANK,eAAeC,CAAC;AAAA,EAQxB,CAAA,EACH,CAAA;AAEJ;"}