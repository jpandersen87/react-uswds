{"version":3,"file":"Link.js","sources":["../../../libSrc/components/Link/Link.tsx"],"sourcesContent":["import React from 'react'\nimport { handleKeyDown, isCustomProps, linkClasses } from './utils.js'\n\n// These props we want to require always, even on custom components\nexport type StyledLinkProps<T> = {\n  variant?: 'external' | 'unstyled' | 'nav'\n  className?: string\n  children: React.ReactNode\n  allowSpacebarActivation?: boolean\n} & T\n\n// These props are only required on the default Link\nexport interface WithDefaultLinkProps {\n  href: string\n}\n\n// Add `asCustom` to the provided custom props\nexport interface WithCustomLinkProps<T> {\n  asCustom: React.FunctionComponent<T>\n}\n\n// Default props means allow the StyledLinkProps as well as any\n// props allowed on the `a` element, plus the required props on\n// WithDefaultLinkProps\nexport type DefaultLinkProps = StyledLinkProps<JSX.IntrinsicElements['a']> &\n  WithDefaultLinkProps\n\n// Custom props means allow the StyledLinkProps as well as the custom\n// props, plus the required props on WithCustomLinkProps\nexport type CustomLinkProps<T> = StyledLinkProps<T> & WithCustomLinkProps<T>\n\nexport type LinkProps<T = DefaultLinkProps> =\n  | DefaultLinkProps\n  | CustomLinkProps<T>\n\nexport default function Link(props: DefaultLinkProps): React.ReactElement\nexport default function Link<T>(props: CustomLinkProps<T>): React.ReactElement\nexport default function Link<\n  FCProps extends React.PropsWithChildren<object> = DefaultLinkProps,\n>(props: LinkProps<FCProps>): React.ReactElement {\n  if (isCustomProps(props)) {\n    const { variant, className, asCustom, children, ...remainingProps } = props\n    // 1. We know props is AsCustomProps<FCProps>\n    // 2. We know AsCustomProps<FCProps> is\n    //    FCProps & { variant: ..., className: ..., children: ..., asCustom: ... }\n    // 3. Therefore we know that removing those props leaves us\n    //    with FCProps\n    //\n    const linkProps: FCProps = remainingProps as unknown as FCProps\n    const classes = linkClasses(variant, className)\n    return React.createElement(\n      asCustom,\n      {\n        className: classes,\n        ...linkProps,\n      },\n      children\n    )\n  } else {\n    const {\n      children,\n      className,\n      variant,\n      allowSpacebarActivation = false,\n      ...linkProps\n    } = props\n\n    const classes = linkClasses(variant, className)\n    return (\n      <a\n        className={classes}\n        {...(allowSpacebarActivation && { onKeyDown: handleKeyDown })}\n        {...linkProps}>\n        {children}\n      </a>\n    )\n  }\n}\n"],"names":["Link","props","isCustomProps","variant","className","asCustom","children","remainingProps","linkProps","classes","linkClasses","React","allowSpacebarActivation","jsx","handleKeyDown"],"mappings":";;;AAqCA,SAAwBA,EAEtBC,GAA+C;AAC3C,MAAAC,EAAcD,CAAK,GAAG;AACxB,UAAM,EAAE,SAAAE,GAAS,WAAAC,GAAW,UAAAC,GAAU,UAAAC,GAAU,GAAGC,EAAmB,IAAAN,GAOhEO,IAAqBD,GACrBE,IAAUC,EAAYP,GAASC,CAAS;AAC9C,WAAOO,EAAM;AAAA,MACXN;AAAA,MACA;AAAA,QACE,WAAWI;AAAA,QACX,GAAGD;AAAA,MACL;AAAA,MACAF;AAAA,IAAA;AAAA,EACF,OACK;AACC,UAAA;AAAA,MACJ,UAAAA;AAAA,MACA,WAAAF;AAAA,MACA,SAAAD;AAAA,MACA,yBAAAS,IAA0B;AAAA,MAC1B,GAAGJ;AAAA,IACD,IAAAP,GAEEQ,IAAUC,EAAYP,GAASC,CAAS;AAE5C,WAAA,gBAAAS;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAWJ;AAAA,QACV,GAAIG,KAA2B,EAAE,WAAWE,EAAc;AAAA,QAC1D,GAAGN;AAAA,QACH,UAAAF;AAAA,MAAA;AAAA,IAAA;AAAA,EAGP;AACF;"}